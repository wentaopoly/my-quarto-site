{"title":"Alice in Wonderland - Knowledge Graph Visualization","markdown":{"yaml":{"title":"Alice in Wonderland - Knowledge Graph Visualization","format":{"html":{"toc":true,"toc-location":"right","toc-depth":2,"toc-title":"📚 Chunks Navigation"}},"execute":{"echo":false},"filters":["marimo-team/marimo"]},"headingText":"📚 Knowledge Graph Explorer","containsRefs":false,"markdown":"\n\n\n```{python .marimo}\nimport marimo as mo\nimport json\nfrom pathlib import Path\nimport graphviz\nfrom graphviz.backend import ExecutableNotFound\n\nDATA_PATH = Path(\"data/all_chunks.json\")\n\n# Load JSON data\nif not DATA_PATH.exists():\n    raise FileNotFoundError(f\"Could not find {DATA_PATH.resolve()}\")\nwith open(DATA_PATH, \"r\", encoding=\"utf-8\") as f:\n    data = json.load(f)\n\nchunks = data.get(\"chunks\", [])\n\n# Helper functions\ndef _two_line_label(node_type: str, name: str) -> str:\n    t = (node_type or \"\").upper().strip()\n    n = (name or \"\").strip()\n    if not t:\n        return n\n    return f\"{t}\\\\n{n}\"\n\ndef normalize_from_kg(chunk: dict):\n    kg = chunk.get(\"kg\", {}) or {}\n    entities = kg.get(\"entities\", []) or []\n    rels = kg.get(\"relationships\", []) or []\n    nodes = []\n    for e in entities:\n        nid = str(e.get(\"id\", e.get(\"name\", \"\")))\n        nlabel = _two_line_label(e.get(\"type\", \"\"), e.get(\"name\", \"\"))\n        nodes.append({\"id\": nid, \"label\": nlabel, \"type\": e.get(\"type\", \"\")})\n    edges = []\n    for r in rels:\n        src = str(r.get(\"source\"))\n        tgt = str(r.get(\"target\"))\n        lab = r.get(\"type\", r.get(\"label\", \"\")) or \"\"\n        undirected = any(k in lab.lower() for k in [\"correlate\", \"independent\", \"married\"])\n        edges.append({\"source\": src, \"target\": tgt, \"label\": lab, \"undirected\": undirected})\n    return nodes, edges\n\ndef normalize_from_arguments(obj: dict):\n    args = (obj or {}).get(\"arguments\", {})\n    raw_nodes = args.get(\"nodes\", []) or []\n    raw_edges = args.get(\"edges\", []) or []\n    nodes = []\n    for idx, n in enumerate(raw_nodes):\n        label = n.get(\"label\", \"\")\n        if \":\" in label:\n            t, name = label.split(\":\", 1)\n            nlabel = _two_line_label(t, name)\n            ntype = t\n        else:\n            nlabel = label\n            ntype = \"\"\n        nodes.append({\"id\": f\"n{idx}\", \"label\": nlabel, \"type\": ntype})\n    def idx_to_id(one_based_idx: int) -> str:\n        i0 = int(one_based_idx) - 1\n        return f\"n{i0}\"\n    edges = []\n    for e in raw_edges:\n        src = idx_to_id(e.get(\"source\"))\n        tgt = idx_to_id(e.get(\"target\"))\n        lab = e.get(\"type\", e.get(\"label\", \"\")) or \"\"\n        undirected = any(k in lab.lower() for k in [\"correlate\", \"independent\", \"married\"])\n        edges.append({\"source\": src, \"target\": tgt, \"label\": lab, \"undirected\": undirected})\n    return nodes, edges\n\ndef extract_nodes_edges(chunk: dict):\n    kg = chunk.get(\"kg\")\n    if isinstance(kg, dict) and (kg.get(\"entities\") or kg.get(\"relationships\")):\n        return normalize_from_kg(chunk)\n    resp = chunk.get(\"response_json\")\n    if isinstance(resp, dict) and isinstance(resp.get(\"arguments\"), dict):\n        return normalize_from_arguments(resp)\n    return [], []\n\ndef render_graph_svg(nodes, edges):\n    if not nodes:\n        return \"<div style='color:#666; text-align:center; padding:20px;'>*No graph data available*</div>\"\n    dot = graphviz.Digraph(\"knowledge-graph\", engine=\"dot\")\n    dot.attr(\"graph\", splines=\"spline\", bgcolor=\"white\")\n    dot.attr(\"node\", shape=\"circle\", style=\"filled\", fillcolor=\"white\", color=\"black\", fontname=\"Times-Roman\", fontsize=\"11\", penwidth=\"1.8\")\n    dot.attr(\"edge\", color=\"black\", fontname=\"Times-Roman\", fontsize=\"10\")\n    shape_map = {\n        \"PERSON\": \"circle\", \"CHARACTER\": \"circle\", \"CREATURE\": \"ellipse\",\n        \"LOCATION\": \"ellipse\", \"OBJECT\": \"box\", \"CONCEPT\": \"diamond\",\n        \"AWARD\": \"circle\", \"DISCOVERY\": \"circle\", \"EVENT\": \"ellipse\",\n    }\n    id_set = set()\n    for n in nodes:\n        nid = str(n[\"id\"])\n        lbl = n.get(\"label\", \"\")\n        ntype = (n.get(\"type\") or \"\").upper()\n        shape = shape_map.get(ntype, \"ellipse\")\n        if ntype in {\"AWARD\", \"DISCOVERY\"}:\n            dot.node(nid, lbl, shape=shape, penwidth=\"2.2\")\n        else:\n            dot.node(nid, lbl, shape=shape)\n        id_set.add(nid)\n    for e in edges:\n        s = str(e[\"source\"])\n        t = str(e[\"target\"])\n        if s not in id_set or t not in id_set:\n            continue\n        lab = e.get(\"label\", \"\")\n        if e.get(\"undirected\"):\n            dot.edge(s, t, dir=\"none\", label=lab)\n        else:\n            dot.edge(s, t, label=lab)\n    try:\n        svg = dot.pipe(format=\"svg\").decode(\"utf-8\")\n        return svg\n    except ExecutableNotFound:\n        return \"<b>Graphviz not found.</b> Please install graphviz.\"\n\nmo.md(f\"✅ Loaded **{len(chunks)}** chunks from the dataset.\")\n```\n\n```{python .marimo}\n# 创建一个简单的导航菜单\nnav_html = \"\"\"\n<div style=\"background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 8px; padding: 15px; margin: 20px 0;\">\n    <h3 style=\"margin-top:0;\">🗂️ Quick Navigation</h3>\n    <p>Click on any chunk below to jump to it:</p>\n    <div style=\"display: flex; flex-wrap: wrap; gap: 8px;\">\n\"\"\"\n\nfor i, chunk in enumerate(chunks):\n    cid = chunk.get(\"id\", i)\n    chapter = chunk.get(\"chapter\", \"?\")\n    # 创建可点击的按钮\n    nav_html += f'<a href=\"#chunk-{cid}\" style=\"text-decoration:none;\"><button style=\"padding:5px 10px; background:#007bff; color:white; border:none; border-radius:4px; cursor:pointer;\">Chunk {cid}</button></a>'\n\nnav_html += \"\"\"\n    </div>\n</div>\n\"\"\"\n\nmo.Html(nav_html)\n```\n\n```{python .marimo}\n# 显示所有chunks的内容\nimport marimo as mo\n\nall_content = []\n\nfor i, chunk in enumerate(chunks):\n    cid = chunk.get(\"id\", i)\n    chapter = chunk.get(\"chapter\", \"?\")\n    \n    # 创建锚点\n    anchor = f'<div id=\"chunk-{cid}\" style=\"scroll-margin-top: 60px;\"></div>'\n    \n    # 创建标题\n    title_html = f'<h2 style=\"color:#333; border-bottom:2px solid #007bff; padding-bottom:10px;\">Chunk {cid} - {chapter}</h2>'\n    \n    # 文本内容\n    text_raw = str(chunk.get(\"text\", \"\"))\n    text_formatted = text_raw.replace(\"\\n\\n\", \"</p><p>\").replace(\"\\n\", \" \")\n    text_html = f\"\"\"\n    <div style=\"background: #f8f9fa; border-left: 4px solid #28a745; border-radius: 5px; padding: 15px; margin: 15px 0;\">\n        <h4 style=\"margin-top:0; color:#28a745;\">📖 Text Content</h4>\n        <div style=\"max-height: 200px; overflow-y: auto; line-height: 1.6; font-family: Georgia, serif; color: #555;\">\n            <p>{text_formatted}</p>\n        </div>\n    </div>\n    \"\"\"\n    \n    # 知识图谱\n    nodes, edges = extract_nodes_edges(chunk)\n    svg = render_graph_svg(nodes, edges)\n    graph_html = f\"\"\"\n    <div style=\"background: white; border: 1px solid #dee2e6; border-radius: 5px; padding: 15px; margin: 15px 0;\">\n        <h4 style=\"margin-top:0; color:#007bff;\">🕸️ Knowledge Graph</h4>\n        <div style=\"min-height:200px;\">\n            {svg}\n        </div>\n    </div>\n    \"\"\"\n    \n    # 返回顶部按钮\n    back_to_top = '<div style=\"text-align:right; margin:20px 0;\"><a href=\"#\" style=\"color:#007bff; text-decoration:none;\">↑ Back to top</a></div>'\n    \n    # 分隔线\n    if i < len(chunks) - 1:\n        separator = '<hr style=\"margin: 40px 0; border: none; border-top: 1px solid #dee2e6;\">'\n    else:\n        separator = ''\n    \n    # 组合内容\n    chunk_html = anchor + title_html + text_html + graph_html + back_to_top + separator\n    all_content.append(chunk_html)\n\n# 显示所有内容\nmo.Html(''.join(all_content))\n```\n","srcMarkdownNoYaml":"\n\n# 📚 Knowledge Graph Explorer\n\n```{python .marimo}\nimport marimo as mo\nimport json\nfrom pathlib import Path\nimport graphviz\nfrom graphviz.backend import ExecutableNotFound\n\nDATA_PATH = Path(\"data/all_chunks.json\")\n\n# Load JSON data\nif not DATA_PATH.exists():\n    raise FileNotFoundError(f\"Could not find {DATA_PATH.resolve()}\")\nwith open(DATA_PATH, \"r\", encoding=\"utf-8\") as f:\n    data = json.load(f)\n\nchunks = data.get(\"chunks\", [])\n\n# Helper functions\ndef _two_line_label(node_type: str, name: str) -> str:\n    t = (node_type or \"\").upper().strip()\n    n = (name or \"\").strip()\n    if not t:\n        return n\n    return f\"{t}\\\\n{n}\"\n\ndef normalize_from_kg(chunk: dict):\n    kg = chunk.get(\"kg\", {}) or {}\n    entities = kg.get(\"entities\", []) or []\n    rels = kg.get(\"relationships\", []) or []\n    nodes = []\n    for e in entities:\n        nid = str(e.get(\"id\", e.get(\"name\", \"\")))\n        nlabel = _two_line_label(e.get(\"type\", \"\"), e.get(\"name\", \"\"))\n        nodes.append({\"id\": nid, \"label\": nlabel, \"type\": e.get(\"type\", \"\")})\n    edges = []\n    for r in rels:\n        src = str(r.get(\"source\"))\n        tgt = str(r.get(\"target\"))\n        lab = r.get(\"type\", r.get(\"label\", \"\")) or \"\"\n        undirected = any(k in lab.lower() for k in [\"correlate\", \"independent\", \"married\"])\n        edges.append({\"source\": src, \"target\": tgt, \"label\": lab, \"undirected\": undirected})\n    return nodes, edges\n\ndef normalize_from_arguments(obj: dict):\n    args = (obj or {}).get(\"arguments\", {})\n    raw_nodes = args.get(\"nodes\", []) or []\n    raw_edges = args.get(\"edges\", []) or []\n    nodes = []\n    for idx, n in enumerate(raw_nodes):\n        label = n.get(\"label\", \"\")\n        if \":\" in label:\n            t, name = label.split(\":\", 1)\n            nlabel = _two_line_label(t, name)\n            ntype = t\n        else:\n            nlabel = label\n            ntype = \"\"\n        nodes.append({\"id\": f\"n{idx}\", \"label\": nlabel, \"type\": ntype})\n    def idx_to_id(one_based_idx: int) -> str:\n        i0 = int(one_based_idx) - 1\n        return f\"n{i0}\"\n    edges = []\n    for e in raw_edges:\n        src = idx_to_id(e.get(\"source\"))\n        tgt = idx_to_id(e.get(\"target\"))\n        lab = e.get(\"type\", e.get(\"label\", \"\")) or \"\"\n        undirected = any(k in lab.lower() for k in [\"correlate\", \"independent\", \"married\"])\n        edges.append({\"source\": src, \"target\": tgt, \"label\": lab, \"undirected\": undirected})\n    return nodes, edges\n\ndef extract_nodes_edges(chunk: dict):\n    kg = chunk.get(\"kg\")\n    if isinstance(kg, dict) and (kg.get(\"entities\") or kg.get(\"relationships\")):\n        return normalize_from_kg(chunk)\n    resp = chunk.get(\"response_json\")\n    if isinstance(resp, dict) and isinstance(resp.get(\"arguments\"), dict):\n        return normalize_from_arguments(resp)\n    return [], []\n\ndef render_graph_svg(nodes, edges):\n    if not nodes:\n        return \"<div style='color:#666; text-align:center; padding:20px;'>*No graph data available*</div>\"\n    dot = graphviz.Digraph(\"knowledge-graph\", engine=\"dot\")\n    dot.attr(\"graph\", splines=\"spline\", bgcolor=\"white\")\n    dot.attr(\"node\", shape=\"circle\", style=\"filled\", fillcolor=\"white\", color=\"black\", fontname=\"Times-Roman\", fontsize=\"11\", penwidth=\"1.8\")\n    dot.attr(\"edge\", color=\"black\", fontname=\"Times-Roman\", fontsize=\"10\")\n    shape_map = {\n        \"PERSON\": \"circle\", \"CHARACTER\": \"circle\", \"CREATURE\": \"ellipse\",\n        \"LOCATION\": \"ellipse\", \"OBJECT\": \"box\", \"CONCEPT\": \"diamond\",\n        \"AWARD\": \"circle\", \"DISCOVERY\": \"circle\", \"EVENT\": \"ellipse\",\n    }\n    id_set = set()\n    for n in nodes:\n        nid = str(n[\"id\"])\n        lbl = n.get(\"label\", \"\")\n        ntype = (n.get(\"type\") or \"\").upper()\n        shape = shape_map.get(ntype, \"ellipse\")\n        if ntype in {\"AWARD\", \"DISCOVERY\"}:\n            dot.node(nid, lbl, shape=shape, penwidth=\"2.2\")\n        else:\n            dot.node(nid, lbl, shape=shape)\n        id_set.add(nid)\n    for e in edges:\n        s = str(e[\"source\"])\n        t = str(e[\"target\"])\n        if s not in id_set or t not in id_set:\n            continue\n        lab = e.get(\"label\", \"\")\n        if e.get(\"undirected\"):\n            dot.edge(s, t, dir=\"none\", label=lab)\n        else:\n            dot.edge(s, t, label=lab)\n    try:\n        svg = dot.pipe(format=\"svg\").decode(\"utf-8\")\n        return svg\n    except ExecutableNotFound:\n        return \"<b>Graphviz not found.</b> Please install graphviz.\"\n\nmo.md(f\"✅ Loaded **{len(chunks)}** chunks from the dataset.\")\n```\n\n```{python .marimo}\n# 创建一个简单的导航菜单\nnav_html = \"\"\"\n<div style=\"background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 8px; padding: 15px; margin: 20px 0;\">\n    <h3 style=\"margin-top:0;\">🗂️ Quick Navigation</h3>\n    <p>Click on any chunk below to jump to it:</p>\n    <div style=\"display: flex; flex-wrap: wrap; gap: 8px;\">\n\"\"\"\n\nfor i, chunk in enumerate(chunks):\n    cid = chunk.get(\"id\", i)\n    chapter = chunk.get(\"chapter\", \"?\")\n    # 创建可点击的按钮\n    nav_html += f'<a href=\"#chunk-{cid}\" style=\"text-decoration:none;\"><button style=\"padding:5px 10px; background:#007bff; color:white; border:none; border-radius:4px; cursor:pointer;\">Chunk {cid}</button></a>'\n\nnav_html += \"\"\"\n    </div>\n</div>\n\"\"\"\n\nmo.Html(nav_html)\n```\n\n```{python .marimo}\n# 显示所有chunks的内容\nimport marimo as mo\n\nall_content = []\n\nfor i, chunk in enumerate(chunks):\n    cid = chunk.get(\"id\", i)\n    chapter = chunk.get(\"chapter\", \"?\")\n    \n    # 创建锚点\n    anchor = f'<div id=\"chunk-{cid}\" style=\"scroll-margin-top: 60px;\"></div>'\n    \n    # 创建标题\n    title_html = f'<h2 style=\"color:#333; border-bottom:2px solid #007bff; padding-bottom:10px;\">Chunk {cid} - {chapter}</h2>'\n    \n    # 文本内容\n    text_raw = str(chunk.get(\"text\", \"\"))\n    text_formatted = text_raw.replace(\"\\n\\n\", \"</p><p>\").replace(\"\\n\", \" \")\n    text_html = f\"\"\"\n    <div style=\"background: #f8f9fa; border-left: 4px solid #28a745; border-radius: 5px; padding: 15px; margin: 15px 0;\">\n        <h4 style=\"margin-top:0; color:#28a745;\">📖 Text Content</h4>\n        <div style=\"max-height: 200px; overflow-y: auto; line-height: 1.6; font-family: Georgia, serif; color: #555;\">\n            <p>{text_formatted}</p>\n        </div>\n    </div>\n    \"\"\"\n    \n    # 知识图谱\n    nodes, edges = extract_nodes_edges(chunk)\n    svg = render_graph_svg(nodes, edges)\n    graph_html = f\"\"\"\n    <div style=\"background: white; border: 1px solid #dee2e6; border-radius: 5px; padding: 15px; margin: 15px 0;\">\n        <h4 style=\"margin-top:0; color:#007bff;\">🕸️ Knowledge Graph</h4>\n        <div style=\"min-height:200px;\">\n            {svg}\n        </div>\n    </div>\n    \"\"\"\n    \n    # 返回顶部按钮\n    back_to_top = '<div style=\"text-align:right; margin:20px 0;\"><a href=\"#\" style=\"color:#007bff; text-decoration:none;\">↑ Back to top</a></div>'\n    \n    # 分隔线\n    if i < len(chunks) - 1:\n        separator = '<hr style=\"margin: 40px 0; border: none; border-top: 1px solid #dee2e6;\">'\n    else:\n        separator = ''\n    \n    # 组合内容\n    chunk_html = anchor + title_html + text_html + graph_html + back_to_top + separator\n    all_content.append(chunk_html)\n\n# 显示所有内容\nmo.Html(''.join(all_content))\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["marimo-team/marimo"],"toc":true,"toc-depth":2,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.33","theme":"cosmo","title":"Alice in Wonderland - Knowledge Graph Visualization","toc-location":"right","toc-title":"📚 Chunks Navigation"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}